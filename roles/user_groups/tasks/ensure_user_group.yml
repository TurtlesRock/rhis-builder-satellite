---

# This play will create the POC specific usergroups in Satellite
# and map them to our external IdM groups.
#
# EXTERNAL AUTH_SOURCES VIA THE API
#
# Please see https://bugzilla.redhat.com/show_bug.cgi?id=1336236
#

- name: "Ensure user group state for - {{ satellite_user_group.name }}"
  redhat.satellite.usergroup:
    username: "{{ satellite_admin_username }}"
    password: "{{ satellite_admin_password }}"
    server_url: "{{ satellite_url }}"
    validate_certs: "{{ satellite_validate_certs | default(omit) }}" # drop through to the module default (true)
    name: "{{ satellite_user_group.name }}"
    admin: "{{ satellite_user_group.admin | default(omit) }}" # drop through to the module default (false)
    roles: "{{ satellite_user_group.roles | default(omit) }}" # pass a list object
    users: "{{ satellite_user_group.users | default(omit) }}" # pass a list object
    usergroups: "{{ satellite_user_group.usergroups | default(omit) }}" # pass a list object
    updated_name: "{{ satellite_user_group.updated_name | default(omit) }}"
    state: "{{ satellite_user_group.state | default(omit) }}" # drop through to the module default (present)
  register: usergroup_result

- name: "Log Result"
  when: dbug_log is defined and dbug_log
  ansible.builtin.debug:
    var: usergroup_result
