---

# we are patching the system so ya, latest is required
# patch only when satellite-installer has not been run

- name: "Is satellite installed?"
  ansible.builtin.include_tasks: "is_satellite_installed.yml"
  # sets _satpre_satellite_installed: true when installed

- name: "Update the system"
  when: not _satpre_satellite_installed
  block:
    - name: "Patch the system using dnf" # noqa: package-latest
      ansible.builtin.dnf:
        name: '*'
        state: latest
      async: "{{ async_timeout }}"
      poll: 0
      register: async_update

    - name: "Check on system update"
      ansible.builtin.async_status:
        jid: "{{ async_update.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ (async_timeout / async_delay) | int }}"
      delay: "{{ async_delay }}"

    - name: "Reset the Ruby module" # noqa: no-changed-when
      ansible.builtin.command: "dnf -y module reset ruby"

    - name: "Reset the PostgreSQL module" # noqa: no-changed-when
      ansible.builtin.command: "dnf -y module reset postgresql"

    - name: "Reset the Satellite module" # noqa: no-changed-when
      when: ansible_distribution_major_version == 8
      ansible.builtin.command: "dnf -y module reset satellite:el8"

    - name: "Enable the Satellite module" # noqa: no-changed-when
      when: ansible_distribution_major_version == 8
      ansible.builtin.command: "dnf -y module enable satellite:el8"

    - name: "Install the Satellite RPM packages"
      ansible.builtin.dnf:
        name: satellite
        state: present
      async: "{{ async_timeout }}"
      poll: 0
      register: async_update

    - name: "Wait for Satellite binary install to complete"
      ansible.builtin.async_status:
        jid: "{{ async_update.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: "{{ (async_timeout / async_delay) | int }}"
      delay: "{{ async_delay }}"
